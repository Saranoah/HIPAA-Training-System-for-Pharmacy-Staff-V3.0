name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # FIXED: Removed Python 3.8 (EOL), added 3.11 and 3.12
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run code formatting check
      run: |
        black --check hipaa_training/ main.py
      continue-on-error: true
    
    - name: Run linting
      run: |
        flake8 hipaa_training/ main.py --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy hipaa_training/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run tests with coverage
      env:
        HIPAA_ENCRYPTION_KEY: test-key-for-ci-only-do-not-use-in-production
        HIPAA_SALT: test-salt-12345678
      run: |
        pytest tests/ \
          --cov=hipaa_training \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml]
    
    # FIXED: Corrected bandit command syntax
    - name: Run Bandit security scan
      run: |
        bandit -r hipaa_training/ main.py \
          -f json \
          -o bandit-results.json \
          --exit-zero
    
    - name: Display security results
      run: |
        if [ -f bandit-results.json ]; then
          cat bandit-results.json | python -m json.tool
        fi
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: bandit-security-report
        path: bandit-results.json
        retention-days: 30

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # FIXED: Proper Docker build and test without exposing secrets
    - name: Build Docker image
      run: |
        docker build \
          -t ${{ secrets.DOCKER_USERNAME }}/hipaa-training-v3:${{ github.sha }} \
          -t ${{ secrets.DOCKER_USERNAME }}/hipaa-training-v3:latest \
          .
    
    - name: Test Docker image
      run: |
        # Test with environment variables
        docker run --rm \
          -e HIPAA_ENCRYPTION_KEY="test-key-for-docker-test" \
          -e HIPAA_SALT="test-salt-12345678" \
          ${{ secrets.DOCKER_USERNAME }}/hipaa-training-v3:${{ github.sha }} \
          python main.py --check-env
    
    - name: Push Docker image
      if: success()
      run: |
        docker push ${{ secrets.DOCKER_USERNAME }}/hipaa-training-v3:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/hipaa-training-v3:latest
    
    - name: Clean up Docker images
      if: always()
      run: |
        docker image prune -f

  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for required files
      run: |
        echo "Checking deployment files..."
        test -f requirements.txt && echo "✓ requirements.txt" || exit 1
        test -f README.md && echo "✓ README.md" || exit 1
        test -f LICENSE && echo "✓ LICENSE" || exit 1
        test -f .gitignore && echo "✓ .gitignore" || exit 1
        test -d hipaa_training && echo "✓ hipaa_training/" || exit 1
        test -f main.py && echo "✓ main.py" || exit 1
        echo "✅ All required files present"
    
    - name: Validate Python syntax
      run: |
        python -m py_compile main.py
        python -m py_compile hipaa_training/*.py
        echo "✅ Python syntax valid"

        # .github/workflows/ci.yml (add security checks)
- name: Security Tests
  run: |
    pytest tests/test_security_comprehensive.py -v
    pytest --cov=hipaa_training --cov-fail-under=80

- name: Security Audit
  run: |
    pip install safety bandit
    safety check
    bandit -r hipaa_training/ -ll
