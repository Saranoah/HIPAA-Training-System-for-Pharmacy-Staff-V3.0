name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test on Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy bandit safety  # ‚úÖ All tools
    
    - name: Run security audit
      run: |
        safety check --json --output safety-report.json || true
        echo "Safety scan completed"
    
    - name: Run code formatting check
      run: |
        black --check hipaa_training/ tests/ main.py
    
    - name: Run linting
      run: |
        flake8 hipaa_training/ tests/ main.py --max-line-length=100 --extend-ignore=E203,W503
    
    - name: Run type checking
      run: |
        mypy hipaa_training/ --ignore-missing-imports
    
    - name: Run tests with coverage
      env:
        HIPAA_ENCRYPTION_KEY: "test-key-32-chars-long-for-ci-only-123"
        HIPAA_SALT: "1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
        DB_URL: ":memory:"
      run: |
        pytest tests/ \
          --cov=hipaa_training \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r hipaa_training/ main.py \
          -f json \
          -o bandit-results.json \
          -ll
    
    - name: Run Safety dependency check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-results.json
          safety-report.json
        retention-days: 30

  docker-build:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build Docker image
      run: |
        docker build \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/hipaa-training-v3:${{ github.sha }} \
          --tag ${{ secrets.DOCKERHUB_USERNAME }}/hipaa-training-v3:latest \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          .
    
    - name: Test Docker image
      run: |
        docker run --rm \
          -e HIPAA_ENCRYPTION_KEY="test-key-32-chars-for-docker-test-only" \
          -e HIPAA_SALT="1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef" \
          ${{ secrets.DOCKERHUB_USERNAME }}/hipaa-training-v3:${{ github.sha }} \
          python -c "from hipaa_training.security import SecurityManager; print('‚úÖ Docker security test passed')"
    
    - name: Push Docker image
      if: success() && github.ref == 'refs/heads/main'
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/hipaa-training-v3:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/hipaa-training-v3:latest

  deployment-check:
    name: Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check for required files
      run: |
        echo "üîç Checking deployment files..."
        required_files=(
          "requirements.txt"
          "README.md" 
          "LICENSE"
          ".gitignore"
          "main.py"
          "Dockerfile"
          ".dockerignore"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "‚úÖ $file"
          else
            echo "‚ùå $file - MISSING"
            exit 1
          fi
        done
        
        if [ -d "hipaa_training" ]; then
          echo "‚úÖ hipaa_training/"
        else
          echo "‚ùå hipaa_training/ - MISSING"
          exit 1
        fi
        
        echo "üéâ All required files present"
    
    - name: Validate Python syntax
      run: |
        python -m py_compile main.py
        find hipaa_training/ -name "*.py" -exec python -m py_compile {} \;
        echo "‚úÖ All Python files compile successfully"
    
    - name: Check for security issues
      run: |
        if [ -f "bandit-results.json" ]; then
          HIGH_ISSUES=$(python -c "import json; data=json.load(open('bandit-results.json')); print(sum(1 for r in data['results'] if r['issue_confidence'] == 'HIGH'))")
          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "‚ùå Found $HIGH_ISSUES high-confidence security issues"
            exit 1
          else
            echo "‚úÖ No high-confidence security issues found"
          fi
        fi
